name: check for version update
description: ensure that a version is incremented and fail if it is not
inputs:
  filename:
    description: name of the file containing the version
    default: VERSION
  expression:
    description: regular expression used to locate the version
    default: ""
  occurrence:
    description: when used in combination with expression, indicates nth match to capture (starting from 1)
    default: "1"
  tag-prefix:
    description: prefix used to create tag from version
    default: ""
  path-prefix:
    description: path prefix used to location version file
    default: ""
outputs:
  version:
    description: version which was provided in the supplied version file
    value: ${{ steps.read-version-file.outputs.version }}
  dev-version:
    description: version which was provided in the supplied version file, with a .devN suffix based on the short commit hash
    value: ${{ steps.read-version-file.outputs.dev-version }}

runs:
  using: composite
  steps:
  - id: read-version-file
    name: read version file
    shell: bash
    run: |
      PATH_PREFIX="${{ inputs.path-prefix }}"
      if [[ "$PATH_PREFIX" != */ ]]
      then
        PATH_PREFIX=${PATH_PREFIX}/
      fi
      VERSION=$($GITHUB_ACTION_PATH/scripts/get_version.sh "${PATH_PREFIX}${{ inputs.filename }}" "${{ inputs.occurrence }}" "${{ inputs.expression }}")
      if [ "$VERSION" == "" ]
      then
        echo "Version could not be determined from file named: ${{ inputs.filename }}"
        exit 1
      fi
      echo "version=${{ inputs.tag-prefix }}${VERSION}" >> "$GITHUB_OUTPUT"
      echo "dev-version=${{ inputs.tag-prefix }}${VERSION}.dev$((16#$(git rev-parse --short HEAD)))" >> "$GITHUB_OUTPUT"
  - id: check-version-ok
    name: check if version is ok for tagging
    shell: bash
    run: $GITHUB_ACTION_PATH/scripts/check_tag_exists.sh "${{ steps.read-version-file.version }}"
       