name: check for version update
description: ensure that a version is incremented and fail if it is not
inputs:
  filename:
    description: name of the file containing the version
    default: VERSION
  expression:
    description: regular expression used to locate the version
    default: ""
  occurrence:
    description: when used in combination with expression, indicates nth match to capture (starting from 1)
    default: "1"
  tag-prefix:
    description: prefix used to create tag from version
    default: ""
  path-prefix:
    description: path prefix used to location version file
    default: ""
  create-release-tag:
    description: create a release tag from the fully qualified version (including prefix)
    default: false
  create-major-release-tag:
    description: create an additional release tag for just the major version
    default: false
outputs:
  version:
    description: version which was provided in the supplied version file
    value: ${{ steps.read-version-file.outputs.version }}
  dev-version:
    description: version which was provided in the supplied version file, with a .devN suffix based on the short commit hash
    value: ${{ steps.read-version-file.outputs.dev-version }}

runs:
  using: composite
  steps:
  - id: read-version-file
    name: read version file
    shell: bash
    run: |
      PATH_PREFIX="${{ inputs.path-prefix }}"
      if [[ "$PATH_PREFIX" != */ ]]
      then
        PATH_PREFIX=${PATH_PREFIX}/
      fi
      FILENAME="${PATH_PREFIX}${{ inputs.filename }}"
      if [ ! -f "$FILENAME" ]
      then
        echo "Version file $FILENAME does not exist at the specified location"
        exit 1
      else
        echo "Version file $FILENAME was located"
      fi
      VERSION=$($GITHUB_ACTION_PATH/scripts/get_version.sh "$FILENAME" "${{ inputs.occurrence }}" "${{ inputs.expression }}")
      if [ "$VERSION" == "" ]
      then
        echo "Version could not be determined from file named: ${{ inputs.filename }}"
        exit 1
      fi

      MAJOR_VERSION=$(echo $VERSION | tr "." "\n" | head -n 1)
      echo FQ_VERSION=${{ inputs.tag-prefix }}${VERSION}
      echo FQ_DEV_VERSION=${{ inputs.tag-prefix }}${VERSION}.dev$((16#$(git rev-parse --short HEAD)))
      echo "version=${FQ_VERSION}" >> "$GITHUB_OUTPUT"
      echo "dev-version=${FQ_DEV_VERSION}" >> "$GITHUB_OUTPUT"
      echo "FQ_VERSION=$FQ_VERSION" >> $GITHUB_ENV
      echo "FQ_MAJOR_VERSION=${{ inputs.tag-prefix }}${MAJOR_VERSION}" >> $GITHUB_ENV
  - id: check-version-ok
    name: check if version is ok for tagging
    shell: bash
    run: $GITHUB_ACTION_PATH/scripts/check_tag_exists.sh "${{ steps.read-version-file.version }}"
  - name: create release tag
    if: ${{ inputs.create-release-tag == 'true' }}
    uses: actions/github-script@v7
    with:
      script: |
        github.rest.git.updateRef({
          owner: context.repo.owner,
          repo: context.repo.repo,
          ref: "tags/${{ env.FQ_VERSION }}",
          sha: "${{ github.sha }}"
        })    
  - name: create major version release tag
    if: ${{ inputs.create-major-release-tag == 'true' }}
    uses: actions/github-script@v7
    with:
      script: |
        github.rest.git.updateRef({
          owner: context.repo.owner,
          repo: context.repo.repo,
          ref: "tags/${{ env.FQ_MAJOR_VERSION }}",
          sha: "${{ github.sha }}",
          force: true
        })    