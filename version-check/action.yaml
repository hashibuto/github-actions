name: check for version update
description: ensure that a version is incremented and fail if it is not
inputs:
  filename:
    description: name of the file containing the version
    default: VERSION
  expression:
    description: regular expression used to locate the version
    default: ""
  occurrence:
    description: when used in combination with expression, indicates nth match to capture (starting from 1)
    default: "1"
  tag-prefix:
    description: prefix used to create tag from version
    default: ""
outputs:
  version:
    description: version which was provided in the supplied version file
    value: ${{ steps.read_version_file.outputs.version }}
  dev-version:
    description: version which was provided in the supplied version file, with a .devN suffix based on the short commit hash
    value: ${{ steps.read_version_file.outputs.dev-version }}
runs:
  using: composite
  steps:
  - id: read_version_file
    name: read version file
    shell: bash
    run: |
      VERSION=$(./scripts/get_version.sh "${{ inputs.filename }}" "${{ inputs.occurrence }}" "${{ inputs.expression }}")
      echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
      echo "dev-version=${VERSION}.dev$((16#$(git rev-parse --short HEAD)))" >> "$GITHUB_OUTPUT"
  - id: check_tag_exists
    name: check if version tag exists
    shell: bash
    run: ./scripts/check_tag_exists.sh "${{ steps.read_version_file.version }}" 
       
